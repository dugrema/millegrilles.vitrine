#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('api:server');
// var http = require('http');
const FS = require("fs");
const Path = require('path');
// const Spdy = require('spdy');
const https = require('https');
const io = require('socket.io');
const rabbitMQ = require('../util/rabbitMQ')
const {WebSocketVitrineApp} = require('../websocket/reactwss')
// const {trackerServer, bindTrackerServer} = require('../util/torrentTracker')

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '443');
const hostIp = process.env.HOST || 'dev2.maple.mdugre.info';
const key_path = process.env.PRIVKEY;
const cert_path = process.env.CERT;
const nomMilleGrille = process.env.MG_NOM_MILLEGRILLE;

app.set('port', port);

/**
 * Create SPDY/http2 server.
 */

const config = {
    hostIp: hostIp,
    cert: FS.readFileSync(cert_path),
    key: FS.readFileSync(key_path)
};

// WebSocket application

const wss_server = io({path: '/vitrine_wss'});
const vitrineWss = new WebSocketVitrineApp(wss_server);

const server = https.createServer(config, app).listen(port, () => {
  wss_server.listen(server);
  console.log('Server is listening at https://localhost:' + port + '. Ctrl^C to stop it.');

  // Torrent tracker
  // trackerServer.onHttpRequest.bind(server);

  // app.get('/stats', trackerServer.onHttpRequest);
  // app.get('/announce', server);
  // app.get('/scrape', server);
  // app.get('/stats', tracker.onHttpRequest);

});

// Connexion a RabbitMQ
let mqConnectionUrl = process.env.MG_MQ_URL || 'amqps://mq:5673/' + nomMilleGrille;
rabbitMQ.connect(mqConnectionUrl)
.then(()=>{
  vitrineWss.initialiserDomaines();
})
.catch(err=>{
  console.error("Erreur connexion MQ, on initialise les domaines conditionnellement");
  console.error(err);

  vitrineWss.initialiserDomaines(true);
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
