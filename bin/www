#!/usr/bin/env node

const debug = require('debug')('millegrilles:vitrine:www')
const express = require('express')
const session = require('express-session')
const MemoryStore = require('memorystore')(session)
const socketioSession = require('express-socket.io-session')
const amqpdao = require('../models/amqpdao')
const {initialiser: initialiserServer} = require('@dugrema/millegrilles.common/lib/server3')
const {initialiser: initialiserVitrine} = require('../routes/vitrine')

const secretCookiesPassword = 'moncookiesecret98321'
const hostname = process.env.HOST

const sessionMiddleware = session({
  secret: secretCookiesPassword,
  cookie: { path: '/', domain: hostname, sameSite: 'strict', secure: true, maxAge: 3600000 },
  store: new MemoryStore({
    checkPeriod: 3600000 // prune expired entries every 1h
  }),
  proxy: true,
  resave: false,
})
const socketioSessionMiddleware = socketioSession(sessionMiddleware, {autoSave: true})

async function init() {

  // Connexion AMQ
  const {amqpdao: instAmqpdao} = await amqpdao.init()
  const idmg = instAmqpdao.pki.idmg

  function stubDev(req, res, next) {
    req.amqpdao = instAmqpdao
    req.idmg = idmg
    // if(!req.session) req.session = {}
    req.session.estProprietaire = true
    req.session.idmgCompte = idmg

    next()
  }

  debug("Initialisation serveur Vitrine avec IDMG : %s", idmg)

  // Creer une collection avec la connexion a MQ (format qui supporte hebergement)
  const rabbitMQParIdmg = {
    [idmg]: instAmqpdao
  }
  const mqList = [instAmqpdao]

  const fctRabbitMQParIdmg = (idmg) => {
    return rabbitMQParIdmg[idmg]
  }

  // Initalier les apps individuelles, mapper dans dict (cle est path relatif)
  const vitrine = await initialiserVitrine(fctRabbitMQParIdmg, {idmg})
  const devRoute = devRouteStub(instAmqpdao, {idmg})
  // const mappingApps = {devRoute, coupdoeil}
  const mappingApps = [
    {path: 'devRoute', ...devRoute},
    {path: 'vitrine', ...vitrine},
  ]

  const root = express()
  root.use(sessionMiddleware)
  root.use(stubDev)

  const serverInstance = initialiserServer(
    root, mappingApps,
    {
      pathSocketio: 'vitrine',
      sessionMiddleware: socketioSessionMiddleware,
      fctRabbitMQParIdmg,
      mqList
    },
  )

}

function devRouteStub(instAmqpdao, opts) {
  const routeTest = express()
  // Aucune fonctionnalite n'est disponible via REST, tout est sur socket.io
  routeTest.get('/index.html', (req, res)=>{res.end("Allo")})
  routeTest.use(function(req, res, next) {res.sendStatus(404)});

  // Ajouter parametres de hook commun pour Socket.IO (dev)
  const socketio = {
    callbackPreSetup: socketio=>preconfigSocketioCallback(socketio, instAmqpdao),
  }

  return {route: routeTest, socketio}
}

function preconfigSocketioCallback(socketIo, instAmqpdao) {
  debug("Callback, preconfig socket.io avec middleware")
  socketIo.use((socket, next)=>{
    debug("Ajout dev params dans req sur socket.io")
    instAmqpdao.routingKeyManager.socketio = socketIo
    next()
  })
}

init()
